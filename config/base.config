process {

    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    // errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
	errorStrategy = 'retry'
    maxRetries    = 3
    maxErrors     = '-1'

    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors

    withLabel:psingle {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
        executor = 'local'
    }
    withLabel:plow {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 4.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h   * task.attempt, 'time'    ) }
    }
    withLabel:pmedium {
        cpus   = { 4 * task.attempt }
        memory = { 180.GB * task.attempt }
        time   = { 24.h * task.attempt }
    }
    withLabel:phigh {
        cpus   = { 8 }
        memory = { 440.GB * task.attempt}
        time   = { 48.h  * task.attempt }
    }

    withLabel:plong {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:phigh_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }

}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
